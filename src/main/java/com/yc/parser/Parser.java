/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.yc.parser;

public class Parser implements ParserConstants {

  final public void Input() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A01:
      case A02:
      case A03:
      case A04:
      case A05:
      case A06:
      case A07:
      case A08:
      case A09:
      case A10:
      case A11:
      case A12:
      case A13:
      case A14:
      case A15:
      case A16:
      case A17:
      case A18:
      case A19:
      case A20:
      case A21:
      case A22:
      case A23:
      case A24:
      case A25:
      case A26:
      case B01:
      case B02:
      case B03:
      case B04:
      case B05:
      case B06:
      case B07:
      case B08:
      case B09:
      case B10:
      case B11:
      case B12:
      case B13:
      case B14:
      case B15:
      case B16:
      case B17:
      case B18:
      case B19:
      case B20:
      case B21:
      case B22:
      case C01:
      case C02:
      case C03:
      case C04:
      case C05:
      case C06:
      case C07:
      case INVALID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Token();
    }
    jj_consume_token(0);
}

  final public void Token() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A01:{
      jj_consume_token(A01);
      break;
      }
    case A02:{
      jj_consume_token(A02);
      break;
      }
    case A03:{
      jj_consume_token(A03);
      break;
      }
    case A04:{
      jj_consume_token(A04);
      break;
      }
    case A05:{
      jj_consume_token(A05);
      break;
      }
    case A06:{
      jj_consume_token(A06);
      break;
      }
    case A07:{
      jj_consume_token(A07);
      break;
      }
    case A08:{
      jj_consume_token(A08);
      break;
      }
    case A09:{
      jj_consume_token(A09);
      break;
      }
    case A10:{
      jj_consume_token(A10);
      break;
      }
    case A11:{
      jj_consume_token(A11);
      break;
      }
    case A12:{
      jj_consume_token(A12);
      break;
      }
    case A13:{
      jj_consume_token(A13);
      break;
      }
    case A14:{
      jj_consume_token(A14);
      break;
      }
    case A15:{
      jj_consume_token(A15);
      break;
      }
    case A16:{
      jj_consume_token(A16);
      break;
      }
    case A17:{
      jj_consume_token(A17);
      break;
      }
    case A18:{
      jj_consume_token(A18);
      break;
      }
    case A19:{
      jj_consume_token(A19);
      break;
      }
    case A20:{
      jj_consume_token(A20);
      break;
      }
    case A21:{
      jj_consume_token(A21);
      break;
      }
    case A22:{
      jj_consume_token(A22);
      break;
      }
    case A23:{
      jj_consume_token(A23);
      break;
      }
    case A24:{
      jj_consume_token(A24);
      break;
      }
    case A25:{
      jj_consume_token(A25);
      break;
      }
    case A26:{
      jj_consume_token(A26);
      break;
      }
    case B01:{
      jj_consume_token(B01);
      break;
      }
    case B02:{
      jj_consume_token(B02);
      break;
      }
    case B03:{
      jj_consume_token(B03);
      break;
      }
    case B04:{
      jj_consume_token(B04);
      break;
      }
    case B05:{
      jj_consume_token(B05);
      break;
      }
    case B06:{
      jj_consume_token(B06);
      break;
      }
    case B07:{
      jj_consume_token(B07);
      break;
      }
    case B08:{
      jj_consume_token(B08);
      break;
      }
    case B09:{
      jj_consume_token(B09);
      break;
      }
    case B10:{
      jj_consume_token(B10);
      break;
      }
    case B11:{
      jj_consume_token(B11);
      break;
      }
    case B12:{
      jj_consume_token(B12);
      break;
      }
    case B13:{
      jj_consume_token(B13);
      break;
      }
    case B14:{
      jj_consume_token(B14);
      break;
      }
    case B15:{
      jj_consume_token(B15);
      break;
      }
    case B16:{
      jj_consume_token(B16);
      break;
      }
    case B17:{
      jj_consume_token(B17);
      break;
      }
    case B18:{
      jj_consume_token(B18);
      break;
      }
    case B19:{
      jj_consume_token(B19);
      break;
      }
    case B20:{
      jj_consume_token(B20);
      break;
      }
    case B21:{
      jj_consume_token(B21);
      break;
      }
    case B22:{
      jj_consume_token(B22);
      break;
      }
    case C01:{
      jj_consume_token(C01);
      break;
      }
    case C02:{
      jj_consume_token(C02);
      break;
      }
    case C03:{
      jj_consume_token(C03);
      break;
      }
    case C04:{
      jj_consume_token(C04);
      break;
      }
    case C05:{
      jj_consume_token(C05);
      break;
      }
    case C06:{
      jj_consume_token(C06);
      break;
      }
    case C07:{
      jj_consume_token(C07);
      break;
      }
    case INVALID:{
      jj_consume_token(INVALID);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffff00,0xffffff00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[65];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 65; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
