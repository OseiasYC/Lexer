/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.yc.parser;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 35:
         return jjStopAtPos(0, 48);
      case 37:
         return jjStopAtPos(0, 31);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 42:
         return jjStopAtPos(0, 44);
      case 43:
         return jjStopAtPos(0, 46);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         return jjStopAtPos(0, 43);
      case 47:
         return jjStopAtPos(0, 45);
      case 58:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 59:
         return jjStopAtPos(0, 37);
      case 60:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 62:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 63:
         return jjStopAtPos(0, 38);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1fe00L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x60000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc00000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3c000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 123:
         return jjStopAtPos(0, 41);
      case 125:
         return jjStopAtPos(0, 42);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100260L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2c00080L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00fc00L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xfc00L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c020000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x840000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20100000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      default :
         return 3;
   }
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000040L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x40020L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c800000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         return 4;
   }
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x180L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80040L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x60020L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xa04000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000L);
      default :
         return 5;
   }
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x18200000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x803100L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40080L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      default :
         return 6;
   }
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 111:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(7, 21);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000c00L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(7, 26);
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(7, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      default :
         return 8;
   }
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      default :
         return 9;
   }
   return 9;
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      default :
         return 10;
   }
   return 10;
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(10, 14);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(10, 7);
         break;
      default :
         return 11;
   }
   return 11;
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         return 12;
   }
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      default :
         return 13;
   }
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(13, 10);
         break;
      default :
         return 14;
   }
   return 14;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\141\144\145\151\141", 
"\143\141\162\141\143\164\145\162", "\144\145\143\154\141\162\141\143\157\145\163", 
"\145\156\161\165\141\156\164\157", "\146\141\154\163\145", 
"\146\151\155\104\145\143\154\141\162\141\143\157\145\163", "\146\151\155\105\156\161\165\141\156\164\157", 
"\146\151\155\106\165\156\143", "\146\151\155\106\165\156\143\157\145\163", 
"\146\151\155\120\162\157\147\162\141\155\141", "\146\151\155\123\145", "\146\165\156\143\157\145\163", 
"\151\155\160\162\151\155\145", "\151\156\164\145\151\162\157", "\154\157\147\151\143\157", 
"\160\141\165\163\141", "\160\162\157\147\162\141\155\141", "\162\145\141\154", 
"\162\145\164\157\162\156\141", "\163\145", "\163\145\156\141\157", "\164\151\160\157\106\165\156\143", 
"\164\151\160\157\120\141\162\141\155", "\164\151\160\157\126\141\162", "\164\162\165\145", "\166\141\172\151\157", 
"\45", "\50", "\51", "\54", "\72", "\72\75", "\73", "\77", "\133", "\135", "\173", 
"\175", "\55", "\52", "\57", "\53", "\41\75", "\43", "\74", "\74\75", "\75\75", "\76", 
"\76\75", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {0
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[0];
    static private final int[] jjstateSet = new int[2 * 0];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
