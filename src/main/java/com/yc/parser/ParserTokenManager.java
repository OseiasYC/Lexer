/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.yc.parser;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffffff00L) != 0L)
         {
            jjmatchedKind = 60;
            return 42;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 14;
         return -1;
      case 1:
         if ((active0 & 0x18000000L) != 0L)
            return 42;
         if ((active0 & 0x3e7ffff00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x3f7ffff00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x102000000L) != 0L)
            return 42;
         if ((active0 & 0x2f5ffff00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0x210841000L) != 0L)
            return 42;
         if ((active0 & 0xe57bef00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0xe53bee00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 42;
         }
         if ((active0 & 0x400100L) != 0L)
            return 42;
         return -1;
      case 6:
         if ((active0 & 0x84398000L) != 0L)
            return 42;
         if ((active0 & 0x61026e00L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return 42;
         }
         return -1;
      case 7:
         if ((active0 & 0x40036400L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 42;
         }
         if ((active0 & 0x21000a00L) != 0L)
            return 42;
         return -1;
      case 8:
         if ((active0 & 0x40000000L) != 0L)
            return 42;
         if ((active0 & 0x36400L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000L) != 0L)
            return 42;
         if ((active0 & 0x26400L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
            return 42;
         }
         return -1;
      case 10:
         if ((active0 & 0x24400L) != 0L)
            return 42;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 10;
            return 42;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 11;
            return 42;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 12;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 34);
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 42:
         return jjStopAtPos(0, 47);
      case 43:
         return jjStopAtPos(0, 49);
      case 44:
         return jjStopAtPos(0, 37);
      case 45:
         return jjStopAtPos(0, 46);
      case 47:
         return jjStartNfaWithStates_0(0, 48, 14);
      case 58:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 62:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 63:
         return jjStopAtPos(0, 41);
      case 91:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 43);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xff000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x18000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 123:
         return jjStopAtPos(0, 44);
      case 125:
         return jjStopAtPos(0, 45);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200801300L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x16000400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xe007e000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x101000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x7e000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0100000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100800000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x204100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xe4000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x841000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0xc00L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 42);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x300100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 42);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x5020000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0xc1000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4018800L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 67:
      case 99:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 42);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 42);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x40006000L);
      case 67:
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 79:
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 77:
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 42);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 83:
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 42);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 17, 42);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 79:
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 42);
         break;
      case 83:
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 13, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x10000000000L, 0x1e7eff9f1e7eff9fL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAdd(40); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(3, 5); }
                  else if (curChar == 33)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(4, 5); }
                  else if (curChar == 35)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 14:
                  if (curChar == 47)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 42)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddTwoStates(21, 22); }
                  }
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 0:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 2:
                  if (curChar == 35 && kind > 50)
                     kind = 50;
                  break;
               case 3:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0x3ff401100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 6:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar != 33)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000200000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if (curChar == 47)
                     { jjAddStates(3, 5); }
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 42)
                     { jjAddStates(9, 10); }
                  break;
               case 17:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 19:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 20:
                  if (curChar != 42)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 22:
                  if (curChar != 42)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 22); }
                  break;
               case 24:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 22); }
                  break;
               case 25:
                  if (curChar == 47)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 27:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 28:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 29:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 46)
                     { jjCheckNAdd(34); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(38); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(41); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(10); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAdd(40); }
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if (curChar != 64)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(12); }
                  break;
               case 15:
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
               case 18:
                  { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 21:
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 23:
               case 24:
                  { jjCheckNAddTwoStates(24, 22); }
                  break;
               case 26:
                  { jjAddStates(6, 8); }
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(41); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 12:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(12); }
                  break;
               case 15:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
               case 18:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 21:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 23:
               case 24:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(24, 22); }
                  break;
               case 26:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   31, 32, 33, 14, 20, 25, 26, 27, 29, 17, 19, 4, 5, 36, 37, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     try { input_stream.backup(0);
        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
           curChar = input_stream.BeginToken();
     }
     catch (java.io.IOException e1) { continue EOFLoop; }
     jjmatchedKind = 0x7fffffff;
     jjmatchedPos = 0;
     curPos = jjMoveStringLiteralDfa0_0();
     if (jjmatchedPos == 0 && jjmatchedKind > 64)
     {
        jjmatchedKind = 64;
     }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         continue EOFLoop;
      }
      curPos = 0;
      jjmatchedKind = 0x7fffffff;
      try {
         curChar = input_stream.readChar();
         continue;
      }
      catch (java.io.IOException e1) { }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
 }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x0L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x1L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[42];
    private final int[] jjstateSet = new int[2 * 42];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
